/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,20],$V1=[1,15],$V2=[1,34],$V3=[1,32],$V4=[1,31],$V5=[1,33],$V6=[1,30],$V7=[1,21],$V8=[1,22],$V9=[1,23],$Va=[1,24],$Vb=[1,25],$Vc=[1,26],$Vd=[1,27],$Ve=[1,29],$Vf=[1,28],$Vg=[2,5,18,24,26,27,29,32,35,37,40,41,42,48,51,52,53,54,55,64],$Vh=[1,61],$Vi=[1,57],$Vj=[1,62],$Vk=[1,58],$Vl=[1,59],$Vm=[1,60],$Vn=[1,63],$Vo=[1,65],$Vp=[1,66],$Vq=[1,90],$Vr=[1,91],$Vs=[1,92],$Vt=[1,93],$Vu=[1,94],$Vv=[1,95],$Vw=[1,96],$Vx=[1,97],$Vy=[1,98],$Vz=[1,99],$VA=[1,100],$VB=[1,101],$VC=[1,102],$VD=[1,103],$VE=[23,30,34,46,47,57,67,68,69,70,71,72,73,74,75,76,77,78],$VF=[34,57],$VG=[1,119],$VH=[1,123],$VI=[1,129],$VJ=[1,130],$VK=[1,131],$VL=[23,30,34,46,47,57,70,71,72,73,74,75,76,78],$VM=[23,30,34,57],$VN=[28,34,57],$VO=[23,30,34,46,47,57,68,69,70,71,72,73,74,75,76,78],$VP=[23,30,34,57,70,71,72,73,74,75,76,78],$VQ=[23,30,34,57,74,75,76,78],$VR=[1,178],$VS=[1,179],$VT=[37,51,52];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Startup":3,"Instructions":4,"EOF":5,"instruction":6,"statIf":7,"statWhile":8,"statDo":9,"statFor":10,"statSwitch":11,"statBreak":12,"statContinue":13,"statConsole":14,"statFunc":15,"statGraph":16,"statCall":17,"statIncremento":18,"varDefinition":19,"statReturn":20,"varAsig":21,"unarOpr":22,";":23,"RETURN":24,"genExpr":25,"LET":26,"ID":27,"=":28,"CONST":29,":":30,"typeVar":31,"GP_TS":32,"(":33,")":34,"IF":35,"{":36,"}":37,"moreIf":38,"ELSE":39,"WHILE":40,"DO":41,"FOR":42,"forVariant":43,"varFor":44,"pasoFor":45,"+":46,"-":47,"SWITCH":48,"swCases":49,"swCase":50,"CASE":51,"DEFAULT":52,"BREAK":53,"CONTINUE":54,"FUNCTION":55,"paramsFunc":56,",":57,"tpf":58,"typeReturn":59,"T_VOID":60,"T_NUMBER":61,"T_BOOLEAN":62,"T_STRING":63,"CONSOLE":64,".":65,"LOG":66,"**":67,"*":68,"/":69,"<=":70,">=":71,"<":72,">":73,"==":74,"!=":75,"&&":76,"%":77,"||":78,"otro":79,"NUMBER":80,"DECIMAL":81,"STRING":82,"!":83,"statCall2":84,"TRUE":85,"FALSE":86,"paramsCall":87,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",18:"statIncremento",23:";",24:"RETURN",26:"LET",27:"ID",28:"=",29:"CONST",30:":",32:"GP_TS",33:"(",34:")",35:"IF",36:"{",37:"}",39:"ELSE",40:"WHILE",41:"DO",42:"FOR",46:"+",47:"-",48:"SWITCH",51:"CASE",52:"DEFAULT",53:"BREAK",54:"CONTINUE",55:"FUNCTION",57:",",60:"T_VOID",61:"T_NUMBER",62:"T_BOOLEAN",63:"T_STRING",64:"CONSOLE",65:".",66:"LOG",67:"**",68:"*",69:"/",70:"<=",71:">=",72:"<",73:">",74:"==",75:"!=",76:"&&",77:"%",78:"||",80:"NUMBER",81:"DECIMAL",82:"STRING",83:"!",85:"TRUE",86:"FALSE"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[20,3],[20,2],[19,5],[19,5],[19,3],[19,7],[19,7],[21,4],[16,4],[7,8],[38,4],[38,2],[38,0],[8,7],[9,9],[10,7],[43,5],[45,3],[45,3],[45,3],[44,4],[44,3],[22,4],[22,4],[11,7],[49,2],[49,1],[50,4],[50,3],[12,2],[13,2],[15,8],[56,3],[56,1],[56,0],[58,3],[59,1],[59,1],[59,1],[59,1],[31,1],[31,1],[31,1],[14,7],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,1],[79,3],[79,1],[79,1],[79,1],[79,1],[79,2],[79,2],[79,1],[79,1],[79,1],[84,3],[84,4],[17,4],[17,5],[87,3],[87,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        return [formater($$[$0-1]), errores];
    
break;
case 2:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 3: case 48:
this.$=[$$[$0]];
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 55: case 58: case 59: case 60: case 61: case 62: case 63: case 64: case 80: case 82: case 83: case 84: case 85: case 88:
 this.$ = $$[$0]; 
break;
case 21:
 errores.push(new Err(this._$.first_line, this._$.first_column, 'Sintactico', yytext)) ;  console.log(yylloc.first_line, yylloc.first_column, 'lexico', yytext+" no pertenece al lenguaje");
break;
case 22:
 this.$ = sr([$$[$0-2],$$[$0-1],$$[$0]])+"\n";
break;
case 23:
 this.$ = sr([$$[$0-1],$$[$0]])+"\n";
break;
case 24: case 25:
this.$ = sr([$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]]);
break;
case 26:
this.$ = sr([$$[$0-2],$$[$0-1],$$[$0]]);
break;
case 27: case 28:
this.$ = sr([$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]]);
break;
case 29:
this.$ = sr([$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]]);
break;
case 30:
 this.$ = sr([$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]]); 
break;
case 31:

        this.$ = sr([$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3]+"\n", formater($$[$0-2])+"\n",$$[$0-1]+"\n",$$[$0]]);
    
break;
case 32:
this.$=sr([$$[$0-3],$$[$0-2]+"\n",formater($$[$0-1])+"\n",$$[$0]+"\n"]);
break;
case 33:
this.$=sr([$$[$0-1],$$[$0]]);
break;
case 34:
this.$="";
break;
case 35:
 this.$ = sr([$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2]+"\n",formater($$[$0-1])+"\n",$$[$0]]); 
break;
case 36:
 this.$ = sr([$$[$0-8],$$[$0-7]+"\n",formater($$[$0-6])+"\n",$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]+"\n"]); 
break;
case 37:
 this.$ = sr([$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2]+"\n",formater($$[$0-1]),$$[$0]+"\n"]); 
break;
case 38:
 this.$ = sr([$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]]); 
break;
case 39: case 40: case 41: case 43: case 54: case 57:
 this.$ = sr([$$[$0-2],$$[$0-1],$$[$0]]); 
break;
case 42:
 this.$ = sr([$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]]);
break;
case 44: case 45:
 this.$ = $$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0]; 
break;
case 46:
 this.$ = sr([$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2]+"\n",formater($$[$0-1])+"\n",$$[$0]+"\n"]);
break;
case 47:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 49:
 this.$ = sr([$$[$0-3],$$[$0-2],$$[$0-1]+"\n",formater($$[$0])+"\n"]); 
break;
case 50:
 this.$ = sr([$$[$0-2],$$[$0-1]+"\n",formater($$[$0])+"\n"]); 
break;
case 51: case 52:
 this.$ = sr([$$[$0-1],$$[$0]]); 
break;
case 53:

        this.$ = sr([$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2]+"\n",desanidar($$[$0-1])[1],$$[$0]+"\n", desanidar($$[$0-1])[0]]);
    
break;
case 56:
 this.$ = " "; 
break;
case 65:
 this.$ = $$[$0-6] + $$[$0-5] + $$[$0-4] + $$[$0-3] + $$[$0-2] +$$[$0-1] + $$[$0]; 
break;
case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 81: case 95:
 this.$ = $$[$0-2] + $$[$0-1] + $$[$0]; 
break;
case 86: case 87:
 this.$ = $$[$0-1] + $$[$0]; 
break;
case 89: case 96:
this.$=$$[$0];
break;
case 90:
 this.$=$$[$0]; 
break;
case 91:
 this.$ = $$[$0-2] + $$[$0-1] + $$[$0] ; 
break;
case 92:
 this.$ = $$[$0-3] + $$[$0-2] + $$[$0-1] +$$[$0] ; 
break;
case 93:
 this.$ = $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0]; 
break;
case 94:
 this.$ = $$[$0-4] + $$[$0-3] + $$[$0-2] +$$[$0-1] + $$[$0]; 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V1,19:16,20:17,21:18,22:19,24:$V2,26:$V3,27:$V4,29:$V5,32:$V6,35:$V7,40:$V8,41:$V9,42:$Va,48:$Vb,53:$Vc,54:$Vd,55:$Ve,64:$Vf},{1:[3]},{2:$V0,5:[1,35],6:36,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V1,19:16,20:17,21:18,22:19,24:$V2,26:$V3,27:$V4,29:$V5,32:$V6,35:$V7,40:$V8,41:$V9,42:$Va,48:$Vb,53:$Vc,54:$Vd,55:$Ve,64:$Vf},o($Vg,[2,3]),o($Vg,[2,4]),o($Vg,[2,5]),o($Vg,[2,6]),o($Vg,[2,7]),o($Vg,[2,8]),o($Vg,[2,9]),o($Vg,[2,10]),o($Vg,[2,11]),o($Vg,[2,12]),o($Vg,[2,13]),o($Vg,[2,15]),o($Vg,[2,16]),o($Vg,[2,17]),o($Vg,[2,18]),o($Vg,[2,19]),o($Vg,[2,20]),{23:[1,37]},{33:[1,38]},{33:[1,39]},{36:[1,40]},{33:[1,41]},{33:[1,42]},{23:[1,43]},{23:[1,44]},{65:[1,45]},{27:[1,46]},{33:[1,47]},{28:[1,49],33:[1,48],46:[1,50],47:[1,51]},{27:[1,52]},{27:[1,53]},{23:[1,55],25:54,27:$Vh,33:$Vi,47:$Vj,79:56,80:$Vk,81:$Vl,82:$Vm,83:$Vn,84:64,85:$Vo,86:$Vp},{1:[2,1]},o($Vg,[2,2]),o($Vg,[2,21]),{25:67,27:$Vh,33:$Vi,47:$Vj,79:56,80:$Vk,81:$Vl,82:$Vm,83:$Vn,84:64,85:$Vo,86:$Vp},{25:68,27:$Vh,33:$Vi,47:$Vj,79:56,80:$Vk,81:$Vl,82:$Vm,83:$Vn,84:64,85:$Vo,86:$Vp},{2:$V0,4:69,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V1,19:16,20:17,21:18,22:19,24:$V2,26:$V3,27:$V4,29:$V5,32:$V6,35:$V7,40:$V8,41:$V9,42:$Va,48:$Vb,53:$Vc,54:$Vd,55:$Ve,64:$Vf},{26:[1,72],27:[1,73],43:70,44:71},{25:74,27:$Vh,33:$Vi,47:$Vj,79:56,80:$Vk,81:$Vl,82:$Vm,83:$Vn,84:64,85:$Vo,86:$Vp},o($Vg,[2,51]),o($Vg,[2,52]),{66:[1,75]},{33:[1,76]},{34:[1,77]},{25:80,27:$Vh,33:$Vi,34:[1,78],47:$Vj,79:56,80:$Vk,81:$Vl,82:$Vm,83:$Vn,84:64,85:$Vo,86:$Vp,87:79},{25:81,27:$Vh,33:$Vi,47:$Vj,79:56,80:$Vk,81:$Vl,82:$Vm,83:$Vn,84:64,85:$Vo,86:$Vp},{46:[1,82]},{47:[1,83]},{23:[1,85],28:[1,84],30:[1,86]},{28:[1,87],30:[1,88]},{23:[1,89],46:$Vq,47:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD},o($Vg,[2,23]),o($VE,[2,80]),{25:104,27:$Vh,33:$Vi,47:$Vj,79:56,80:$Vk,81:$Vl,82:$Vm,83:$Vn,84:64,85:$Vo,86:$Vp},o($VE,[2,82]),o($VE,[2,83]),o($VE,[2,84]),o($VE,[2,85],{33:[1,105]}),{25:106,27:$Vh,33:$Vi,47:$Vj,79:56,80:$Vk,81:$Vl,82:$Vm,83:$Vn,84:64,85:$Vo,86:$Vp},{25:107,27:$Vh,33:$Vi,47:$Vj,79:56,80:$Vk,81:$Vl,82:$Vm,83:$Vn,84:64,85:$Vo,86:$Vp},o($VE,[2,88]),o($VE,[2,89]),o($VE,[2,90]),{34:[1,108],46:$Vq,47:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD},{34:[1,109],46:$Vq,47:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD},{2:$V0,6:36,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V1,19:16,20:17,21:18,22:19,24:$V2,26:$V3,27:$V4,29:$V5,32:$V6,35:$V7,37:[1,110],40:$V8,41:$V9,42:$Va,48:$Vb,53:$Vc,54:$Vd,55:$Ve,64:$Vf},{34:[1,111]},{23:[1,112]},{27:[1,113]},{28:[1,114]},{34:[1,115],46:$Vq,47:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD},{33:[1,116]},o($VF,[2,56],{56:117,58:118,27:$VG}),{23:[1,120]},{23:[1,121]},{34:[1,122],57:$VH},o($VF,[2,96],{46:$Vq,47:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD}),{23:[1,124],46:$Vq,47:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD},{23:[1,125]},{23:[1,126]},{25:127,27:$Vh,33:$Vi,47:$Vj,79:56,80:$Vk,81:$Vl,82:$Vm,83:$Vn,84:64,85:$Vo,86:$Vp},o($Vg,[2,26]),{31:128,61:$VI,62:$VJ,63:$VK},{25:132,27:$Vh,33:$Vi,47:$Vj,79:56,80:$Vk,81:$Vl,82:$Vm,83:$Vn,84:64,85:$Vo,86:$Vp},{31:133,61:$VI,62:$VJ,63:$VK},o($Vg,[2,22]),{25:134,27:$Vh,33:$Vi,47:$Vj,79:56,80:$Vk,81:$Vl,82:$Vm,83:$Vn,84:64,85:$Vo,86:$Vp},{25:135,27:$Vh,33:$Vi,47:$Vj,79:56,80:$Vk,81:$Vl,82:$Vm,83:$Vn,84:64,85:$Vo,86:$Vp},{25:136,27:$Vh,33:$Vi,47:$Vj,79:56,80:$Vk,81:$Vl,82:$Vm,83:$Vn,84:64,85:$Vo,86:$Vp},{25:137,27:$Vh,33:$Vi,47:$Vj,79:56,80:$Vk,81:$Vl,82:$Vm,83:$Vn,84:64,85:$Vo,86:$Vp},{25:138,27:$Vh,33:$Vi,47:$Vj,79:56,80:$Vk,81:$Vl,82:$Vm,83:$Vn,84:64,85:$Vo,86:$Vp},{25:139,27:$Vh,33:$Vi,47:$Vj,79:56,80:$Vk,81:$Vl,82:$Vm,83:$Vn,84:64,85:$Vo,86:$Vp},{25:140,27:$Vh,33:$Vi,47:$Vj,79:56,80:$Vk,81:$Vl,82:$Vm,83:$Vn,84:64,85:$Vo,86:$Vp},{25:141,27:$Vh,33:$Vi,47:$Vj,79:56,80:$Vk,81:$Vl,82:$Vm,83:$Vn,84:64,85:$Vo,86:$Vp},{25:142,27:$Vh,33:$Vi,47:$Vj,79:56,80:$Vk,81:$Vl,82:$Vm,83:$Vn,84:64,85:$Vo,86:$Vp},{25:143,27:$Vh,33:$Vi,47:$Vj,79:56,80:$Vk,81:$Vl,82:$Vm,83:$Vn,84:64,85:$Vo,86:$Vp},{25:144,27:$Vh,33:$Vi,47:$Vj,79:56,80:$Vk,81:$Vl,82:$Vm,83:$Vn,84:64,85:$Vo,86:$Vp},{25:145,27:$Vh,33:$Vi,47:$Vj,79:56,80:$Vk,81:$Vl,82:$Vm,83:$Vn,84:64,85:$Vo,86:$Vp},{25:146,27:$Vh,33:$Vi,47:$Vj,79:56,80:$Vk,81:$Vl,82:$Vm,83:$Vn,84:64,85:$Vo,86:$Vp},{25:147,27:$Vh,33:$Vi,47:$Vj,79:56,80:$Vk,81:$Vl,82:$Vm,83:$Vn,84:64,85:$Vo,86:$Vp},{34:[1,148],46:$Vq,47:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD},{25:80,27:$Vh,33:$Vi,34:[1,149],47:$Vj,79:56,80:$Vk,81:$Vl,82:$Vm,83:$Vn,84:64,85:$Vo,86:$Vp,87:150},o($VL,[2,86],{67:$Vs,68:$Vt,69:$Vu,77:$VC}),o($VM,[2,87],{46:$Vq,47:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD}),{36:[1,151]},{36:[1,152]},{40:[1,153]},{36:[1,154]},{25:155,27:$Vh,33:$Vi,47:$Vj,79:56,80:$Vk,81:$Vl,82:$Vm,83:$Vn,84:64,85:$Vo,86:$Vp},{28:[1,156]},{25:157,27:$Vh,33:$Vi,47:$Vj,79:56,80:$Vk,81:$Vl,82:$Vm,83:$Vn,84:64,85:$Vo,86:$Vp},{36:[1,158]},{25:159,27:$Vh,33:$Vi,47:$Vj,79:56,80:$Vk,81:$Vl,82:$Vm,83:$Vn,84:64,85:$Vo,86:$Vp},{34:[1,160],57:[1,161]},o($VF,[2,55]),{30:[1,162]},o($Vg,[2,30]),o($Vg,[2,93]),{23:[1,163]},{25:164,27:$Vh,33:$Vi,47:$Vj,79:56,80:$Vk,81:$Vl,82:$Vm,83:$Vn,84:64,85:$Vo,86:$Vp},o($Vg,[2,29]),o($Vg,[2,44]),o($Vg,[2,45]),{23:[1,165],46:$Vq,47:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD},{28:[1,166]},o($VN,[2,62]),o($VN,[2,63]),o($VN,[2,64]),{23:[1,167],46:$Vq,47:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD},{28:[1,168]},o($VL,[2,66],{67:$Vs,68:$Vt,69:$Vu,77:$VC}),o($VL,[2,67],{67:$Vs,68:$Vt,69:$Vu,77:$VC}),o($VM,[2,68],{46:$Vq,47:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD}),o($VO,[2,69],{67:$Vs,77:$VC}),o($VO,[2,70],{67:$Vs,77:$VC}),o($VP,[2,71],{46:$Vq,47:$Vr,67:$Vs,68:$Vt,69:$Vu,77:$VC}),o($VP,[2,72],{46:$Vq,47:$Vr,67:$Vs,68:$Vt,69:$Vu,77:$VC}),o($VP,[2,73],{46:$Vq,47:$Vr,67:$Vs,68:$Vt,69:$Vu,77:$VC}),o($VP,[2,74],{46:$Vq,47:$Vr,67:$Vs,68:$Vt,69:$Vu,77:$VC}),o($VQ,[2,75],{46:$Vq,47:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,77:$VC}),o($VQ,[2,76],{46:$Vq,47:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,77:$VC}),o([23,30,34,57,76,78],[2,77],{46:$Vq,47:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,77:$VC}),o($VM,[2,78],{46:$Vq,47:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD}),o([23,30,34,57,78],[2,79],{46:$Vq,47:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC}),o($VE,[2,81]),o($VE,[2,91]),{34:[1,169],57:$VH},{2:$V0,4:170,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V1,19:16,20:17,21:18,22:19,24:$V2,26:$V3,27:$V4,29:$V5,32:$V6,35:$V7,40:$V8,41:$V9,42:$Va,48:$Vb,53:$Vc,54:$Vd,55:$Ve,64:$Vf},{2:$V0,4:171,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V1,19:16,20:17,21:18,22:19,24:$V2,26:$V3,27:$V4,29:$V5,32:$V6,35:$V7,40:$V8,41:$V9,42:$Va,48:$Vb,53:$Vc,54:$Vd,55:$Ve,64:$Vf},{33:[1,172]},{2:$V0,4:173,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V1,19:16,20:17,21:18,22:19,24:$V2,26:$V3,27:$V4,29:$V5,32:$V6,35:$V7,40:$V8,41:$V9,42:$Va,48:$Vb,53:$Vc,54:$Vd,55:$Ve,64:$Vf},{23:[1,174],46:$Vq,47:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD},{25:175,27:$Vh,33:$Vi,47:$Vj,79:56,80:$Vk,81:$Vl,82:$Vm,83:$Vn,84:64,85:$Vo,86:$Vp},{23:[2,43],46:$Vq,47:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD},{49:176,50:177,51:$VR,52:$VS},{34:[1,180],46:$Vq,47:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD},{36:[1,181]},{27:$VG,58:182},{31:183,61:$VI,62:$VJ,63:$VK},o($Vg,[2,94]),o($VF,[2,95],{46:$Vq,47:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD}),o($Vg,[2,24]),{25:184,27:$Vh,33:$Vi,47:$Vj,79:56,80:$Vk,81:$Vl,82:$Vm,83:$Vn,84:64,85:$Vo,86:$Vp},o($Vg,[2,25]),{25:185,27:$Vh,33:$Vi,47:$Vj,79:56,80:$Vk,81:$Vl,82:$Vm,83:$Vn,84:64,85:$Vo,86:$Vp},o($VE,[2,92]),{2:$V0,6:36,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V1,19:16,20:17,21:18,22:19,24:$V2,26:$V3,27:$V4,29:$V5,32:$V6,35:$V7,37:[1,186],40:$V8,41:$V9,42:$Va,48:$Vb,53:$Vc,54:$Vd,55:$Ve,64:$Vf},{2:$V0,6:36,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V1,19:16,20:17,21:18,22:19,24:$V2,26:$V3,27:$V4,29:$V5,32:$V6,35:$V7,37:[1,187],40:$V8,41:$V9,42:$Va,48:$Vb,53:$Vc,54:$Vd,55:$Ve,64:$Vf},{25:188,27:$Vh,33:$Vi,47:$Vj,79:56,80:$Vk,81:$Vl,82:$Vm,83:$Vn,84:64,85:$Vo,86:$Vp},{2:$V0,6:36,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V1,19:16,20:17,21:18,22:19,24:$V2,26:$V3,27:$V4,29:$V5,32:$V6,35:$V7,37:[1,189],40:$V8,41:$V9,42:$Va,48:$Vb,53:$Vc,54:$Vd,55:$Ve,64:$Vf},{27:[1,191],45:190},{23:[2,42],46:$Vq,47:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD},{37:[1,192],50:193,51:$VR,52:$VS},o($VT,[2,48]),{25:194,27:$Vh,33:$Vi,47:$Vj,79:56,80:$Vk,81:$Vl,82:$Vm,83:$Vn,84:64,85:$Vo,86:$Vp},{30:[1,195]},{23:[1,196]},{2:$V0,4:197,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V1,19:16,20:17,21:18,22:19,24:$V2,26:$V3,27:$V4,29:$V5,32:$V6,35:$V7,40:$V8,41:$V9,42:$Va,48:$Vb,53:$Vc,54:$Vd,55:$Ve,64:$Vf},o($VF,[2,54]),o($VF,[2,57]),{23:[1,198],46:$Vq,47:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD},{23:[1,199],46:$Vq,47:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD},o($Vg,[2,34],{38:200,39:[1,201]}),o($Vg,[2,35]),{34:[1,202],46:$Vq,47:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD},o($Vg,[2,37]),{34:[2,38]},{28:[1,205],46:[1,203],47:[1,204]},o($Vg,[2,46]),o($VT,[2,47]),{30:[1,206],46:$Vq,47:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD},{2:$V0,4:207,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V1,19:16,20:17,21:18,22:19,24:$V2,26:$V3,27:$V4,29:$V5,32:$V6,35:$V7,40:$V8,41:$V9,42:$Va,48:$Vb,53:$Vc,54:$Vd,55:$Ve,64:$Vf},o($Vg,[2,65]),{2:$V0,6:36,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V1,19:16,20:17,21:18,22:19,24:$V2,26:$V3,27:$V4,29:$V5,32:$V6,35:$V7,37:[1,208],40:$V8,41:$V9,42:$Va,48:$Vb,53:$Vc,54:$Vd,55:$Ve,64:$Vf},o($Vg,[2,27]),o($Vg,[2,28]),o($Vg,[2,31]),{7:210,35:$V7,36:[1,209]},{23:[1,211]},{46:[1,212]},{47:[1,213]},{25:214,27:$Vh,33:$Vi,47:$Vj,79:56,80:$Vk,81:$Vl,82:$Vm,83:$Vn,84:64,85:$Vo,86:$Vp},{2:$V0,4:215,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V1,19:16,20:17,21:18,22:19,24:$V2,26:$V3,27:$V4,29:$V5,32:$V6,35:$V7,40:$V8,41:$V9,42:$Va,48:$Vb,53:$Vc,54:$Vd,55:$Ve,64:$Vf},o($VT,[2,50],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:16,20:17,21:18,22:19,6:36,2:$V0,18:$V1,24:$V2,26:$V3,27:$V4,29:$V5,32:$V6,35:$V7,40:$V8,41:$V9,42:$Va,48:$Vb,53:$Vc,54:$Vd,55:$Ve,64:$Vf}),o($Vg,[2,53]),{2:$V0,4:216,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V1,19:16,20:17,21:18,22:19,24:$V2,26:$V3,27:$V4,29:$V5,32:$V6,35:$V7,40:$V8,41:$V9,42:$Va,48:$Vb,53:$Vc,54:$Vd,55:$Ve,64:$Vf},o($Vg,[2,33]),o($Vg,[2,36]),{34:[2,39]},{34:[2,40]},{34:[2,41],46:$Vq,47:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD},o($VT,[2,49],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:16,20:17,21:18,22:19,6:36,2:$V0,18:$V1,24:$V2,26:$V3,27:$V4,29:$V5,32:$V6,35:$V7,40:$V8,41:$V9,42:$Va,48:$Vb,53:$Vc,54:$Vd,55:$Ve,64:$Vf}),{2:$V0,6:36,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V1,19:16,20:17,21:18,22:19,24:$V2,26:$V3,27:$V4,29:$V5,32:$V6,35:$V7,37:[1,217],40:$V8,41:$V9,42:$Va,48:$Vb,53:$Vc,54:$Vd,55:$Ve,64:$Vf},o($Vg,[2,32])],
defaultActions: {35:[2,1],190:[2,38],212:[2,39],213:[2,40]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const {Err} = require('../err');
    const {errores} = require('../Errores');



    function sr(a){
        var m = "";
        for (i = 0; i < a.length; i++) {
            m += a[i] + " ";
        }
        return m;
    }

    function desanidar(m){
        var res = "";
        var res2 = "";
        var mx = [];
        var op = [];

        for (i = 0; i < m.length; i++) {
            res = m[i].substr(0,8);
            if(res == "function"){
                mx.push(m[i]);
            }else{
                op.push(m[i]);
            }
        }

        res = "";
        res2 = "";

        for (i = 0; i < mx.length; i++) {
            res += mx[i];
        }

        for (i = 0; i < op.length; i++) {
            res2 += op[i];
        }

        return [res, res2];
    }

    function formater(s){
        var m = "";
        for (i = 0; i < s.length; i++) {
            m += s[i]+"\n";
        }
        return m;
    }

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:
break;
case 2:
break;
case 3:return 81
break;
case 4:return 80
break;
case 5:return 82
break;
case 6:return 82
break;
case 7:return 67
break;
case 8:return 68
break;
case 9:return 69
break;
case 10:return 23
break;
case 11:return 57
break;
case 12:return 47
break;
case 13:return 46
break;
case 14:return 65
break;
case 15:return 77
break;
case 16:return 70
break;
case 17:return 71
break;
case 18:return 72
break;
case 19:return 73
break;
case 20:return 74
break;
case 21:return 75
break;
case 22:return 78
break;
case 23:return 76
break;
case 24:return 83
break;
case 25:return 28
break;
case 26:return 30
break;
case 27:return 33
break;
case 28:return 34 
break;
case 29:return 36
break;
case 30:return 37
break;
case 31:return 35
break;
case 32:return 39
break;
case 33:return 40
break;
case 34:return 'PRINT'
break;
case 35:return 53
break;
case 36:return 41
break;
case 37:return 42
break;
case 38:return 48
break;
case 39:return 51
break;
case 40:return 52
break;
case 41:return 54
break;
case 42:return 24
break;
case 43:return 64
break;
case 44:return 66
break;
case 45:return 55
break;
case 46:return 26
break;
case 47:return 29
break;
case 48:return 'VAR'
break;
case 49:return 85
break;
case 50:return 86
break;
case 51:return "T_STRING"
break;
case 52:return "T_NUMBER"
break;
case 53:return "T_BOOLEAN"
break;
case 54:return "T_VOID"
break;
case 55:return "GP_TS"
break;
case 56:return 27;
break;
case 57:return 5
break;
case 58: errores.push(new Err(yy_.yylloc.first_line, yy_.yylloc.first_column, 'lexico', yy_.yytext+" no pertenece al lenguaje")); console.log(yy_.yylloc.first_line, yy_.yylloc.first_column, 'lexico', yy_.yytext+" no pertenece al lenguaje");
break;
}
},
rules: [/^(?:\s+)/i,/^(?:[/][/].*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:(([0-9]+)[.]([0-9]+)))/i,/^(?:([0-9]+))/i,/^(?:(("[^"]*")))/i,/^(?:(('[^"]*')))/i,/^(?:\*\*)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:;)/i,/^(?:,)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:\.)/i,/^(?:%)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:=)/i,/^(?::)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:while\b)/i,/^(?:print\b)/i,/^(?:break\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:console\b)/i,/^(?:log\b)/i,/^(?:function\b)/i,/^(?:let\b)/i,/^(?:const\b)/i,/^(?:var\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:string\b)/i,/^(?:number\b)/i,/^(?:boolean\b)/i,/^(?:void\b)/i,/^(?:graficar_ts\b)/i,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}